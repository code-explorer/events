var suggestions=document.getElementById('suggestions'),search=document.getElementById('search');search!==null&&document.addEventListener('keydown',inputFocus);function inputFocus(a){a.ctrlKey&&a.key==='/'&&(a.preventDefault(),search.focus()),a.key==='Escape'&&(search.blur(),suggestions.classList.add('d-none'))}document.addEventListener('click',function(a){var b=suggestions.contains(a.target);b||suggestions.classList.add('d-none')}),document.addEventListener('keydown',suggestionFocus);function suggestionFocus(c){const d=suggestions.classList.contains('d-none');if(d)return;const a=[...suggestions.querySelectorAll('a')];if(a.length===0)return;const b=a.indexOf(document.activeElement);if(c.key==="ArrowUp"){c.preventDefault();const d=b>0?b-1:0;a[d].focus()}else if(c.key==="ArrowDown"){c.preventDefault();const d=b+1<a.length?b+1:b;a[d].focus()}}(function(){var a=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:'id',store:["href","title","description"],index:["title","description","content"]}});a.add({id:0,href:"/docs/todo-list-app-with-electron/installation-and-basic-setup/",title:"Installation and Basic Setup",description:"Installing Node.js # To get started with electron, you need to install Node.js.\nGo to nodejs.org/en/download/ and download the LTS or Long Term Support version. Once its downloaded, install node.js on your system.\nVerify Installation # Once you have installed node.js, you can test your installation by running the following commands in the terminal.\nnode -v npm -v  On running these you should be able to see the versions of node.",content:"Installing Node.js # To get started with electron, you need to install Node.js.\nGo to nodejs.org/en/download/ and download the LTS or Long Term Support version. Once its downloaded, install node.js on your system.\nVerify Installation # Once you have installed node.js, you can test your installation by running the following commands in the terminal.\nnode -v npm -v  On running these you should be able to see the versions of node.js and the node package manager like this, although your version might be different:\nInstalling VSCode # VSCode is a light-weight text editor with lots of useful features such as integrated terminal and autocompletion.\nTo install VSCode, head over to the official website.\nSetting up electron # To create an electron app, first create and open the folder for you app inside VSCode.\nThen open up the terminal inside VSCode by hitting Ctrl + J.\nRun the command npm init inside the terminal. This is start the setup process for creating your app. You can leave most fields as default or blank by just hitting enter. Make sure you set the entry point as main.js.\n  This command with generate a file named package.json which looks like this.\n{ \u0026quot;name\u0026quot;: \u0026quot;electron-todo-list\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;1.0.0\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;main\u0026quot;: \u0026quot;main.js\u0026quot;, \u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot; }, \u0026quot;author\u0026quot;: \u0026quot;Satwik Kambham\u0026quot;, \u0026quot;license\u0026quot;: \u0026quot;MIT\u0026quot; }  Installing the electron package # Finally we need to install the electron package to do this, run the following command in the terminal:\nnpm install --save-dev electron  Inside the package.json file which was created, replace the lines\n\u0026quot;scripts\u0026quot;: { \u0026quot;test\u0026quot;: \u0026quot;echo \\\u0026quot;Error: no test specified\\\u0026quot; \u0026amp;\u0026amp; exit 1\u0026quot; },  with\n\u0026quot;scripts\u0026quot;: { \u0026quot;start\u0026quot;: \u0026quot;electron .\u0026quot; },  Creating the main files # To get our app running we need to create a few files with the following content.\n main.js - The starting point of our app  // Import from the electron library const { app, BrowserWindow } = require(\u0026quot;electron\u0026quot;); // Function to create a window function createWindow() { const win = new BrowserWindow({ width: 800, height: 600, }); // Load the html file inside the window win.loadFile(\u0026quot;index.html\u0026quot;); } // Create the window when the app is initialized app.whenReady().then(() =\u0026gt; { createWindow(); }); // Quit the app when the window is closed app.on(\u0026quot;window-all-closed\u0026quot;, () =\u0026gt; { app.quit(); });   index.html - The html page displayed on the window  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --\u0026gt; \u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Hello World!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello World!\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  You can now run the command npm start to start your electron application.\n  "}).add({id:1,href:"/docs/todo-list-app-with-electron/displaying-todos/",title:"Displaying Todos",description:"Now that we have electron setup, let us start displaying some todos.\nModifying index.html # To get started let us modify the html file so that we can start adding todos.\nLet us add a title and a div which can store the todos. Replace the body of index.html with the following:\n\u0026lt;h1\u0026gt;Todo List\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  In electron, the main script file (in our case main.js) cannot directly access and modify the html page.",content:"Now that we have electron setup, let us start displaying some todos.\nModifying index.html # To get started let us modify the html file so that we can start adding todos.\nLet us add a title and a div which can store the todos. Replace the body of index.html with the following:\n\u0026lt;h1\u0026gt;Todo List\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  In electron, the main script file (in our case main.js) cannot directly access and modify the html page. To do that, we need to link another script file so that we can modify the html file.\nCreate a file named index.js and add the following to the body of index.html:\n\u0026lt;script src=\u0026quot;index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  Once you have done this, your index.html file should look like this:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --\u0026gt; \u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Hello World!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Todo List\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026quot;index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Modifying the html file using JavaScript # Now that we have our html file setup, let us dynamically add todos using JavaScript.\nFirst let us create a variable holding a list of todos. Each todo has a following information:\n A Description Whether or not it has been completed  Inside index.js create a variable named Todos which contains a list of todo objects like this:\nlet Todos = [ { Description: \u0026quot;Buy some groceries\u0026quot;, Done: false, }, { Description: \u0026quot;Prepare for exams\u0026quot;, Done: true, }, ];  Now let us create a function which adds our todos to the html file. Each todo is combination of a checkbox and a span. We are giving each checkbox a unique id so that we can identify them later.\nfunction displayTodos(todos) { // Get the div inside which we are going to store the todos todosHTML = document.getElementById(\u0026quot;todos\u0026quot;); // Clear the contents of the div todosHTML.innerHTML = \u0026quot;\u0026quot;; let i = 0; todos.forEach((todo) =\u0026gt; { todosHTML.innerHTML += '\u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;todo-check-' + i + '\u0026quot;' + (todo.Done ? \u0026quot;checked\u0026quot; : \u0026quot;\u0026quot;) + \u0026quot;\u0026gt;\u0026lt;span\u0026gt;\u0026quot; + todo.Description + \u0026quot;\u0026lt;/span\u0026gt;\u0026lt;br/\u0026gt;\u0026quot;; i++; }); }  Finally, let us run this function. To do this add the following line in index.js:\ndisplayTodos(Todos);  At this point your index.js file should look like this:\nlet Todos = [ { Description: \u0026quot;Buy some groceries\u0026quot;, Done: false, }, { Description: \u0026quot;Prepare for exams\u0026quot;, Done: true, }, ]; function displayTodos(todos) { // Get the div inside which we are going to store the todos todosHTML = document.getElementById(\u0026quot;todos\u0026quot;); // Clear the contents of the div todosHTML.innerHTML = \u0026quot;\u0026quot;; let i = 0; todos.forEach((todo) =\u0026gt; { todosHTML.innerHTML += '\u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;todo-check-' + i + '\u0026quot;' + (todo.Done ? \u0026quot;checked\u0026quot; : \u0026quot;\u0026quot;) + \u0026quot;\u0026gt;\u0026lt;span\u0026gt;\u0026quot; + todo.Description + \u0026quot;\u0026lt;/span\u0026gt;\u0026lt;br/\u0026gt;\u0026quot;; i++; }); } displayTodos(Todos);  If you start your application using the command npm start you should see something that looks like this:   "}).add({id:2,href:"/docs/todo-list-app-with-electron/adding-todos/",title:"Adding Todos",description:"Now let us add some functionality to add some todos.\nAdding text box and button # First, let us add a button and a textbox where we can enter and add todos.\nWe can do this by adding the following lines of code to the body of our html just below the div which contains the todos.\n\u0026lt;input id=\u0026quot;add-inp\u0026quot; type=\u0026quot;text\u0026quot; /\u0026gt; \u0026lt;button id=\u0026quot;add-btn\u0026quot;\u0026gt;Add\u0026lt;/button\u0026gt;  Also let us change the title to say To-do list app.",content:"Now let us add some functionality to add some todos.\nAdding text box and button # First, let us add a button and a textbox where we can enter and add todos.\nWe can do this by adding the following lines of code to the body of our html just below the div which contains the todos.\n\u0026lt;input id=\u0026quot;add-inp\u0026quot; type=\u0026quot;text\u0026quot; /\u0026gt; \u0026lt;button id=\u0026quot;add-btn\u0026quot;\u0026gt;Add\u0026lt;/button\u0026gt;  Also let us change the title to say To-do list app.\nAfter this, you index.html file should look like this.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --\u0026gt; \u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;title\u0026gt;To-do list app\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Todo List\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;input id=\u0026quot;add-inp\u0026quot; type=\u0026quot;text\u0026quot; /\u0026gt; \u0026lt;button id=\u0026quot;add-btn\u0026quot;\u0026gt;Add\u0026lt;/button\u0026gt; \u0026lt;script src=\u0026quot;index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Adding functionality using javascript # To add the functionality to our add button let us first create a function that looks like this:\nfunction addTodo() { // Get the description from the text box let description = document.getElementById(\u0026quot;add-inp\u0026quot;).value; // Add the todo to the list Todos.push({ Description: description, Done: false, }); // Display the updated list of todos displayTodos(Todos); }  Now let us bind the add button to call this function.\ndocument.getElementById(\u0026quot;add-btn\u0026quot;).addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; addTodo());  After doing this, your index.js file should look like this:\nlet Todos = [ { Description: \u0026quot;Buy some groceries\u0026quot;, Done: false, }, { Description: \u0026quot;Prepare for exams\u0026quot;, Done: true, }, ]; function displayTodos(todos) { // Get the div inside which we are going to store the todos todosHTML = document.getElementById(\u0026quot;todos\u0026quot;); // Clear the contents of the div todosHTML.innerHTML = \u0026quot;\u0026quot;; let i = 0; todos.forEach((todo) =\u0026gt; { todosHTML.innerHTML += '\u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;todo-check-' + i + '\u0026quot;' + (todo.Done ? \u0026quot;checked\u0026quot; : \u0026quot;\u0026quot;) + \u0026quot;\u0026gt;\u0026lt;span\u0026gt;\u0026quot; + todo.Description + \u0026quot;\u0026lt;/span\u0026gt;\u0026lt;br/\u0026gt;\u0026quot;; i++; }); } displayTodos(Todos); function addTodo() { // Get the description from the text box let description = document.getElementById(\u0026quot;add-inp\u0026quot;).value; // Add the todo to the list Todos.push({ Description: description, Done: false, }); // Display the updated list of todos displayTodos(Todos); } // Call add todo when add button is clicked document.getElementById(\u0026quot;add-btn\u0026quot;).addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; addTodo());  Now run your app and try out your new functionality.   "}).add({id:3,href:"/docs/todo-list-app-with-electron/enabling-data-persistence/",title:"Enabling Data Persistence",description:"At this point you might have noticed that after adding any todos, if you restart your application, the todos don\u0026rsquo;t stay.\nTo do this we will need to store your todos to memory. There are 2-ways in which you can store data to disk. Firstly, we can use a database. However, this involves complex setup and maintenance. The second way to do this is to store our data directly to a file.",content:"At this point you might have noticed that after adding any todos, if you restart your application, the todos don\u0026rsquo;t stay.\nTo do this we will need to store your todos to memory. There are 2-ways in which you can store data to disk. Firstly, we can use a database. However, this involves complex setup and maintenance. The second way to do this is to store our data directly to a file.\nThe easiest way to do this is to use the electron-store package.\nInstalling the package # To install the electron-store package all we need to do is run the following command:\nnpm install electron-store  main.js vs index.js # You might have been wondering why we have 2 different script files (main.js and index.js).\nThe reason is that main.js is the main script that runs even when you have multiple windows but index.js runs only when the index.html page which it is connected to is loaded.\nSo, if we want to have data persistance, we need to do the file handling inside main.js and then send it to index.js to display it.\nStoring and retrieving data # Now that we have the electron-store package installed we can import and use it in our application.\nTo import the library add the following lines of code at the beginning of main.js:\nconst Store = require(\u0026quot;electron-store\u0026quot;);  Now let us create a variable from the Store class that we imported. Add the following lines below the code to import the library:\nconst store = new Store();  Finally, let us create functions for storing and retrieving todos.\n// Load todos from disk and if not todos exist then return a blank array function loadTodos() { return store.get(\u0026quot;todos\u0026quot;, []); } // Save the following todos function saveTodos(todos) { store.set(\u0026quot;todos\u0026quot;, todos); }  At this point you main.js should look like this:\n// Import from the electron library const { app, BrowserWindow } = require(\u0026quot;electron\u0026quot;); // Import electron store library const Store = require(\u0026quot;electron-store\u0026quot;); const store = new Store(); // Function to create a window function createWindow() { const win = new BrowserWindow({ width: 800, height: 600, }); // Load the html file inside the window win.loadFile(\u0026quot;index.html\u0026quot;); } // Create the window when the app is initialized app.whenReady().then(() =\u0026gt; { createWindow(); }); // Quit the app when the window is closed app.on(\u0026quot;window-all-closed\u0026quot;, () =\u0026gt; { app.quit(); }); // Load todos from disk and if not todos exist then return a blank array function loadTodos() { return store.get(\u0026quot;todos\u0026quot;, []); } // Save the following todos function saveTodos(todos) { store.set(\u0026quot;todos\u0026quot;, todos); }  Transferring data between main.js and index.js # At this point we have create function to store and retrieve data from disk. However, we have no way to send the retrieved data from main.js to index.js and updated data form index.js to main.js.\nBefore we do anything, we need to modify our createWindow() function to allow index.js to use node.js libraries. Update the createWindow() function to the following:\nfunction createWindow() { const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true, contextIsolation: false, }, }); // Load the html file inside the window win.loadFile(\u0026quot;index.html\u0026quot;); }  Import necessary libraries # Now that node.js libraries can be used inside all our script files we can import the necessary libraries.\nInside main.js modify\n// Import from the electron library const { app, BrowserWindow } = require(\u0026quot;electron\u0026quot;);  to\n// Import from the electron library const { app, BrowserWindow, webContents, ipcMain } = require(\u0026quot;electron\u0026quot;);  Inside index.js add the following line at the beginning:\nconst { ipcRenderer } = require(\u0026quot;electron\u0026quot;);  Sending todos from main.js to index.js # To load and send todos on app start, we have to modify our createWindow() function to the following:\nfunction createWindow() { const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true, contextIsolation: false, }, }); // Load the html file inside the window win.loadFile(\u0026quot;index.html\u0026quot;); // Send todos to index.html on the displayTodos channel win.webContents.on(\u0026quot;did-finish-load\u0026quot;, () =\u0026gt; { win.webContents.send(\u0026quot;displayTodos\u0026quot;, loadTodos()); }); }  Receiving todos from main.js # To receive the todos add the following line to index.js:\nipcRenderer.on(\u0026quot;displayTodos\u0026quot;, (event, todos) =\u0026gt; displayTodos(todos));  Sending updated todos from index.js # Since we are always going to call the displayTodos() function whenever our todos are updated we can add the following line to send the updated todos to main.js:\nipcRenderer.send(\u0026quot;updated-todos\u0026quot;, Todos);  Receiving updated todos from index.js # We can receive the updated todos from index.js and update our storage by adding the following to main.js:\nipcMain.on(\u0026quot;updated-todos\u0026quot;, (event, todos) =\u0026gt; { saveTodos(todos); });  Now our app can store our todos even after the app is closed.\nHowever there is one final thing we need to do which is to update the todo whenever a checkbox is clicked. We have already given a unique id to each checkbox so all we need to do is update the todos whenever the checkbox is clicked.\nFirst let us create a function inside index.js which toggles our todos inside the variable where we store all our todos.\nfunction toggleTodo(i) { Todos[i].Done = !Todos[i].Done; displayTodos(Todos); }  Next let us update our displayTodos() function to add event listeners to all our checkboxes:\nfunction displayTodos(todos) { // Get the div inside which we are going to store the todos todosHTML = document.getElementById(\u0026quot;todos\u0026quot;); // Clear the contents of the div todosHTML.innerHTML = \u0026quot;\u0026quot;; let i = 0; todos.forEach((todo) =\u0026gt; { todosHTML.innerHTML += '\u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;todo-check-' + i + '\u0026quot;' + (todo.Done ? \u0026quot;checked\u0026quot; : \u0026quot;\u0026quot;) + \u0026quot;\u0026gt;\u0026lt;span\u0026gt;\u0026quot; + todo.Description + \u0026quot;\u0026lt;/span\u0026gt;\u0026lt;br/\u0026gt;\u0026quot;; i++; }); ipcRenderer.send(\u0026quot;updated-todos\u0026quot;, Todos); for (let i = 0; i \u0026lt; Todos.length; i++) { document .getElementById(\u0026quot;todo-check-\u0026quot; + i) .addEventListener(\u0026quot;change\u0026quot;, () =\u0026gt; toggleTodo(i)); } }  Now the functionality for our app is done.\nAt the end your files should look like this:\nmain.js\n// Import from the electron library const { app, BrowserWindow, webContents, ipcMain } = require(\u0026quot;electron\u0026quot;); // Import electron store library const Store = require(\u0026quot;electron-store\u0026quot;); const store = new Store(); // Function to create a window function createWindow() { const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true, contextIsolation: false, }, }); // Load the html file inside the window win.loadFile(\u0026quot;index.html\u0026quot;); // Send todos to index.html on the displayTodos channel win.webContents.on(\u0026quot;did-finish-load\u0026quot;, () =\u0026gt; { win.webContents.send(\u0026quot;displayTodos\u0026quot;, loadTodos()); }); } // Create the window when the app is initialized app.whenReady().then(() =\u0026gt; { createWindow(); }); // Quit the app when the window is closed app.on(\u0026quot;window-all-closed\u0026quot;, () =\u0026gt; { app.quit(); }); // Load todos from disk and if not todos exist then return a blank array function loadTodos() { return store.get(\u0026quot;todos\u0026quot;, []); } // Save the following todos function saveTodos(todos) { store.set(\u0026quot;todos\u0026quot;, todos); } // Save updated todos ipcMain.on(\u0026quot;updated-todos\u0026quot;, (event, todos) =\u0026gt; { saveTodos(todos); });  index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --\u0026gt; \u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;title\u0026gt;To-do list app\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Todo List\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;input id=\u0026quot;add-inp\u0026quot; type=\u0026quot;text\u0026quot; /\u0026gt; \u0026lt;button id=\u0026quot;add-btn\u0026quot;\u0026gt;Add\u0026lt;/button\u0026gt; \u0026lt;script src=\u0026quot;index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  index.js\nconst { ipcRenderer } = require(\u0026quot;electron\u0026quot;); let Todos = []; function displayTodos(todos) { // Get the div inside which we are going to store the todos todosHTML = document.getElementById(\u0026quot;todos\u0026quot;); // Clear the contents of the div todosHTML.innerHTML = \u0026quot;\u0026quot;; let i = 0; todos.forEach((todo) =\u0026gt; { todosHTML.innerHTML += '\u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;todo-check-' + i + '\u0026quot;' + (todo.Done ? \u0026quot;checked\u0026quot; : \u0026quot;\u0026quot;) + \u0026quot;\u0026gt;\u0026lt;span\u0026gt;\u0026quot; + todo.Description + \u0026quot;\u0026lt;/span\u0026gt;\u0026lt;br/\u0026gt;\u0026quot;; i++; }); ipcRenderer.send(\u0026quot;updated-todos\u0026quot;, Todos); for (let i = 0; i \u0026lt; Todos.length; i++) { document .getElementById(\u0026quot;todo-check-\u0026quot; + i) .addEventListener(\u0026quot;change\u0026quot;, () =\u0026gt; toggleTodo(i)); } } ipcRenderer.on(\u0026quot;displayTodos\u0026quot;, (event, todos) =\u0026gt; displayTodos(todos)); function addTodo() { // Get the description from the text box let description = document.getElementById(\u0026quot;add-inp\u0026quot;).value; // Add the todo to the list Todos.push({ Description: description, Done: false, }); // Display the updated list of todos displayTodos(Todos); } // Call add todo when add button is clicked document.getElementById(\u0026quot;add-btn\u0026quot;).addEventListener(\u0026quot;click\u0026quot;, () =\u0026gt; addTodo()); function toggleTodo(i) { Todos[i].Done = !Todos[i].Done; displayTodos(Todos); }  "}).add({id:4,href:"/docs/todo-list-app-with-electron/adding-bootstrap/",title:"Adding Bootstrap",description:"As a final step to our project let use the bootstrap css library to make our app look appealing. If you don\u0026rsquo;t really know what bootstrap is, it is a css library which allows you to quickly create beautiful websites. You can read more about it here.\nInstalling the bootstrap library # First, let us install the bootstrap library. Run the following command to install the bootstrap library:\nnpm install bootstrap --save  Linking bootstrap to index.",content:"As a final step to our project let use the bootstrap css library to make our app look appealing. If you don\u0026rsquo;t really know what bootstrap is, it is a css library which allows you to quickly create beautiful websites. You can read more about it here.\nInstalling the bootstrap library # First, let us install the bootstrap library. Run the following command to install the bootstrap library:\nnpm install bootstrap --save  Linking bootstrap to index.html # To use bootstrap in your html file you need to link it by adding the following line of code inside the head of the html:\n\u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;node_modules\\bootstrap\\dist\\css\\bootstrap.min.css\u0026quot;\u0026gt;  Adding bootstrap to index.html # At this point, if you run your app, it should look something like this:   Let us improve it by first adding some padding. Modify the body tag of your html file by adding the class p-3 to it. Now the html\u0026rsquo;s body should look like this:\n\u0026lt;body class=\u0026quot;p-3\u0026quot;\u0026gt; ... \u0026lt;/body\u0026gt;  Next up, add the class list-group to your todos div element so that it looks like this:\n\u0026lt;div class=\u0026quot;list-group\u0026quot; id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  At this point your index.html should look like this:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --\u0026gt; \u0026lt;meta http-equiv=\u0026quot;Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;meta http-equiv=\u0026quot;X-Content-Security-Policy\u0026quot; content=\u0026quot;default-src 'self'; script-src 'self'; img-src 'self' blob: data:;\u0026quot;\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;node_modules\\bootstrap\\dist\\css\\bootstrap.min.css\u0026quot;\u0026gt; \u0026lt;title\u0026gt;To-do list app\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026quot;p-3\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Todo List\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026quot;list-group\u0026quot; id=\u0026quot;todos\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;input id=\u0026quot;add-inp\u0026quot; type=\u0026quot;text\u0026quot; /\u0026gt; \u0026lt;button id=\u0026quot;add-btn\u0026quot;\u0026gt;Add\u0026lt;/button\u0026gt; \u0026lt;script src=\u0026quot;index.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Adding bootstrap to todos # Next let us add bootstrap to the todos that we add. Let us change our displayTodos() function like so:\nfunction displayTodos(todos) { // Get the div inside which we are going to store the todos todosHTML = document.getElementById(\u0026quot;todos\u0026quot;); // Clear the contents of the div todosHTML.innerHTML = \u0026quot;\u0026quot;; let i = 0; todos.forEach((todo) =\u0026gt; { todosHTML.innerHTML += '\u0026lt;label class=\u0026quot;list-group-item d-flex gap-3 todo-checkbox\u0026quot;\u0026gt;\u0026lt;input class=\u0026quot;form-check-input flex-shrink-0\u0026quot; type=\u0026quot;checkbox\u0026quot; id=\u0026quot;todo-check-' + i + '\u0026quot;' + (todo.Done ? \u0026quot;checked\u0026quot; : \u0026quot;\u0026quot;) + '\u0026gt;\u0026lt;span class=\u0026quot;pt-1 form-checked-content\u0026quot;\u0026gt;\u0026lt;strong\u0026gt;' + todo.Description + \u0026quot;\u0026lt;/strong\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/label\u0026gt;\u0026quot;; i++; }); ipcRenderer.send(\u0026quot;updated-todos\u0026quot;, Todos); for (let i = 0; i \u0026lt; Todos.length; i++) { document .getElementById(\u0026quot;todo-check-\u0026quot; + i) .addEventListener(\u0026quot;change\u0026quot;, () =\u0026gt; toggleTodo(i)); } }  At the end of this you should have an app that looks like this:   "}).add({id:5,href:"/docs/todo-list-app-with-electron/packaging-application/",title:"Packaging Application",description:"In order to package and distribute your electron application, you can use Electron Forge.\nInstalling Electron Forge # Run the following command to install electron forge:\nnpm install --save-dev @electron-forge/cli npx electron-forge import  Package Application # To build your application for distribution, run the command:\nnpm run make  This will create a folder called out which contains your application ready for distribution.",content:"In order to package and distribute your electron application, you can use Electron Forge.\nInstalling Electron Forge # Run the following command to install electron forge:\nnpm install --save-dev @electron-forge/cli npx electron-forge import  Package Application # To build your application for distribution, run the command:\nnpm run make  This will create a folder called out which contains your application ready for distribution.\n"}).add({id:6,href:"/docs/todo-list-app-with-electron/",title:"Todo List App With Electron",description:"",content:""}).add({id:7,href:"/docs/",title:"Docs",description:"Resources",content:""}),search.addEventListener('input',b,!0);function b(){var b,e;const d=5;b=this.value,e=a.search(b,{limit:d,enrich:!0});const c=new Map;for(const a of e.flatMap(a=>a.result)){if(c.has(a.doc.href))continue;c.set(a.doc.href,a.doc)}if(suggestions.innerHTML="",suggestions.classList.remove('d-none'),c.size===0&&b){const a=document.createElement('div');a.innerHTML=`No results for "<strong>${b}</strong>"`,a.classList.add("suggestion__no-results"),suggestions.appendChild(a);return}for(const[h,g]of c){const b=document.createElement('div');suggestions.appendChild(b);const a=document.createElement('a');a.href=h,b.appendChild(a);const e=document.createElement('span');e.textContent=g.title,e.classList.add("suggestion__title"),a.appendChild(e);const f=document.createElement('span');if(f.textContent=g.description,f.classList.add("suggestion__description"),a.appendChild(f),suggestions.appendChild(b),suggestions.childElementCount==d)break}}})()